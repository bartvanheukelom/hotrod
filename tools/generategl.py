#!/usr/bin/python

import json
import re

#input output files
IN_FILE = 'gl_h.json'
OUT_FILE = '../src/gl.cpp.incl'

#map some OpenGL types to V8 types
unsigned = re.compile('unsigned|ubyte|ushort|uint|bitfield|boolean')
integer = re.compile('int|enum|sizei|short|byte')
double = re.compile('double|float|clampf|clampd')

EXCLUDE = re.compile('ATI|MESA')

def main():
    """Generates Gl bindings"""

    with open(IN_FILE, 'r') as f:
        data = f.read()
        json_in = json.loads(data)

    with open(OUT_FILE, 'w') as fout:

        w = lambda s: fout.write(s)
        wel = lambda: fout.write("\n")
        wl = lambda s: fout.write(s + "\n")

        wl("// generated by generategl.py - DON'T EDIT")
        wel()
        wel()
        wel()

        funcNames = []

        for func in json_in['functions']:

            print(func)
            name = func['name']
            params = func['parameters']

            if (func['return_type'] != "void"):
                print("SKIP not void")
                wl("// SKIP " + name + " because it returns " + func['return_type'])
                wel()
                continue

            if (re.search(EXCLUDE, name)):
                print("SKIP " + name)
                wl("// SKIP " + name)
                wel()
                continue

            funcNames.append(name)

            wl("FUNCTION_SIGNATURE(" + name + ") {")
            first = True
            wl("\tFUNCTION_BODY_START(" + str(len(params)) + ")")
            wl("\t" + name + "(")
            for i, type in enumerate(params):
                if (not first):
                    wl(",")
                else:
                    first = False
                #w("\t\tFUNCTION_BODY_ARG(" + str(i) + ", " + type + ")")
                w("\t\tgetArg<" + type + ">(args[" + str(i) + "])")
            wel()
            wl("\t);")
            wl("}")
            wel()

        wl("DECLARE_FUNCTIONS_START")
        for fn in funcNames:
            wl("\tDECLARE_FUNCTION(" + fn + ")")
        wl("DECLARE_FUNCTIONS_END")

def multiple_replace(dict, text):
  """ Replace in 'text' all occurences of any key in the given
  dictionary by its corresponding value.  Returns the new string."""

  # Create a regular expression  from the dictionary keys
  regex = re.compile("(%s)" % "|".join(map(re.escape, dict.keys())))

  # For each match, look-up corresponding value in dictionary
  return regex.sub(lambda mo: dict[mo.string[mo.start():mo.end()]], text)

if __name__ == '__main__': main()
